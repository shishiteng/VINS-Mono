%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/cam0/image_raw"
output_path: "/home/sst/catkin_vinsmono/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.06824199754048244
   k2: -0.12225804082670617
   p1: 0.0005448866333476665
   p2: -0.0003029000738576628
projection_parameters:
   fx: 534.1510597883835
   fy: 534.6996170603129
   cx: 324.10438163117306
   cy: 211.46121296615007

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.99992325,  0.00930136,  0.00818451,
          0.00917658, -0.99984306,  0.01515436,
          0.00832418, -0.01507809, -0.99985167]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.00591438, 0.00450056, -0.05169857]

#feature traker paprameters
max_cnt: 100            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters    The more accurate parameters you provide, the better performance
acc_n: 0.08       # accelerometer measurement noise standard deviation. 250µg/√Hz  0.00294m/s^2
gyr_n: 0.0013      # gyroscope measurement noise standard deviation. 0.01º/s/√Hz,0.0001742 rad/s
acc_w: 0.004       # accelerometer bias random work noise standard deviation. 0.0014 m/s^2
gyr_w: 0.00006     # gyroscope bias random work noise standard deviation. 6e-5 rad/s

#acc_n: 0.2        # accelerometer measurement noise standard deviation. 250µg/√Hz  0.00294m/s^2
#gyr_n: 0.008      # gyroscope measurement noise standard deviation. 0.01º/s/√Hz,0.00017452 rad/s
#acc_w: 0.002      # accelerometer bias random work noise standard deviation. 0.0014 m/s^2
#gyr_w: 0.000022   # gyroscope bias random work noise standard deviation. 6e-5 rad/s
g_norm: 9.8     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0       # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/sst/catkin_vinsmono/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0018                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
